<?php

namespace ContainerN9zFeK6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getParserService extends phpDocumentor_KernelProdContainer
{
    /*
     * Gets the private 'phpDocumentor\Parser\Parser' shared autowired service.
     *
     * @return \phpDocumentor\Parser\Parser
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/phpDocumentor/Parser/Parser.php';
        include_once \dirname(__DIR__, 5).'/reflection-common/src/ProjectFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/ProjectFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/StrategyContainer.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/ProjectFactoryStrategies.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/ProjectFactoryStrategy.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/AbstractFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Argument.php';
        include_once \dirname(__DIR__, 6).'/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php';
        include_once \dirname(__DIR__, 6).'/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/ClassConstant.php';
        include_once \dirname(__DIR__, 5).'/reflection-docblock/src/DocBlockFactoryInterface.php';
        include_once \dirname(__DIR__, 5).'/reflection-docblock/src/DocBlockFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Class_.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/ConstructorPromotion.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Method.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Define.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/File.php';
        include_once \dirname(__DIR__, 4).'/src/phpDocumentor/Parser/FileFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/NodesFactory.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Function_.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/GlobalConstant.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/IfStatement.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Interface_.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Namespace_.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Noop.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Property.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/TraitUse.php';
        include_once \dirname(__DIR__, 5).'/reflection/src/phpDocumentor/Reflection/Php/Factory/Trait_.php';
        include_once \dirname(__DIR__, 6).'/symfony/stopwatch/Stopwatch.php';

        $a = new \phpDocumentor\Reflection\Php\ProjectFactoryStrategies([]);

        $b = new \PhpParser\PrettyPrinter\Standard();
        $c = \phpDocumentor\Reflection\DocBlockFactory::createInstance();
        $d = new \phpDocumentor\Reflection\Php\Factory\Method($c);

        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Argument($b));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\ClassConstant($c, $b));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Class_($c));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\ConstructorPromotion($d, $c, $b), 1100);
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Define($c, $b));
        $a->addStrategy(\phpDocumentor\Parser\FileFactory::createInstance($c, \phpDocumentor\Reflection\Php\NodesFactory::createInstance(), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['phpDocumentor\\Parser\\Middleware\\StopwatchMiddleware'] ?? $container->load('getStopwatchMiddlewareService'));
            yield 1 => ($container->privates['phpDocumentor\\Parser\\Middleware\\EmittingMiddleware'] ?? ($container->privates['phpDocumentor\\Parser\\Middleware\\EmittingMiddleware'] = new \phpDocumentor\Parser\Middleware\EmittingMiddleware()));
            yield 2 => ($container->privates['phpDocumentor\\Parser\\Middleware\\CacheMiddleware'] ?? $container->load('getCacheMiddlewareService'));
            yield 3 => ($container->privates['phpDocumentor\\Parser\\Middleware\\ErrorHandlingMiddleware'] ?? $container->load('getErrorHandlingMiddlewareService'));
            yield 4 => ($container->privates['phpDocumentor\\Parser\\Middleware\\ReEncodingMiddleware'] ?? ($container->privates['phpDocumentor\\Parser\\Middleware\\ReEncodingMiddleware'] = new \phpDocumentor\Parser\Middleware\ReEncodingMiddleware()));
        }, 5)));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Function_($c));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\GlobalConstant($c, $b));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\IfStatement());
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Interface_($c));
        $a->addStrategy($d);
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Namespace_());
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Noop(), -10000);
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Property($c, $b));
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\TraitUse());
        $a->addStrategy(new \phpDocumentor\Reflection\Php\Factory\Trait_($c));

        return $container->privates['phpDocumentor\\Parser\\Parser'] = new \phpDocumentor\Parser\Parser(new \phpDocumentor\Reflection\Php\ProjectFactory($a), ($container->privates['debug.stopwatch'] ?? ($container->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')));
    }
}

<?php

namespace ContainerN9zFeK6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getRenderHandlerService extends phpDocumentor_KernelProdContainer
{
    /*
     * Gets the private 'phpDocumentor\Guides\Handlers\RenderHandler' shared autowired service.
     *
     * @return \phpDocumentor\Guides\Handlers\RenderHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Guides/Handlers/RenderHandler.php';
        include_once \dirname(__DIR__, 4).'/src/Guides/Metas.php';

        return $container->privates['phpDocumentor\\Guides\\Handlers\\RenderHandler'] = new \phpDocumentor\Guides\Handlers\RenderHandler(($container->privates['phpDocumentor\\Guides\\Metas'] ?? ($container->privates['phpDocumentor\\Guides\\Metas'] = new \phpDocumentor\Guides\Metas())), ($container->privates['phpDocumentor\\Guides\\Renderer'] ?? $container->load('getRendererService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['phpDocumentor\\Guides\\References\\Doc'] ?? ($container->privates['phpDocumentor\\Guides\\References\\Doc'] = new \phpDocumentor\Guides\References\Doc()));
            yield 1 => ($container->privates['phpDocumentor\\Guides\\References\\NamespaceReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\NamespaceReference'] = new \phpDocumentor\Guides\References\NamespaceReference()));
            yield 2 => ($container->privates['phpDocumentor\\Guides\\References\\PhpClassReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpClassReference'] = new \phpDocumentor\Guides\References\PhpClassReference()));
            yield 3 => ($container->privates['phpDocumentor\\Guides\\References\\PhpFunctionReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpFunctionReference'] = new \phpDocumentor\Guides\References\PhpFunctionReference()));
            yield 4 => ($container->privates['phpDocumentor\\Guides\\References\\PhpMethodReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpMethodReference'] = new \phpDocumentor\Guides\References\PhpMethodReference()));
        }, 5), ($container->privates['phpDocumentor\\Transformer\\Router\\Router'] ?? $container->load('getRouter2Service')));
    }
}
